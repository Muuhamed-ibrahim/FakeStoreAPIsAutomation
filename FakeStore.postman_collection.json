{
	"info": {
		"_postman_id": "c4d966e4-a772-40d4-8c27-142b6445c54d",
		"name": "FakeStore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30813592"
	},
	"item": [
		{
			"name": "1- Login",
			"item": [
				{
					"name": "25-user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.token;\r",
									"\r",
									"pm.environment.set(\"Token\",token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"mor_2314\",\r\n    \"password\": \"83r5^_\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/auth/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2- Products",
			"item": [
				{
					"name": "1- Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"\r",
									"pm.test(\"1-|1-GetAllProducts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate on JsonData\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"2-|1-GetAllProducts|Check response body includes ID\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"3-|1-GetAllProducts|Check response body includes Title\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"4-|1-GetAllProducts|Check response body includes Price\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"5-|1-GetAllProducts|Check response body includes Category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"6-|1-GetAllProducts|Check response body includes Description\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"7-|1-GetAllProducts|Check response body includes Image\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"8-|1-GetAllProducts|Check response body includes Rating\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"9-|1-GetAllProducts|Check response body includes Rate\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"10-|1-GetAllProducts|Check response body includes Count\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\");\r",
									"});\r",
									"\r",
									"// Validate Response body values is not qual null\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"11-|1-GetAllProducts|Check ID !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"12-|1-GetAllProducts|Check Title !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"13-|1-GetAllProducts|Check Price !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"14-|1-GetAllProducts|Check Category !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"15-|1-GetAllProducts|Check Description !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"16-|1-GetAllProducts|Check Image !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"17-|1-GetAllProducts|Check Rating !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"18-|1-GetAllProducts|Check Rate !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"19-|1-GetAllProducts|Check Count !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate DataType of response body\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"20-|1-GetAllProducts|Check ID DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"21-|1-GetAllProducts|Check Title DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.be.a(\"String\");\r",
									"}); \r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"22-|1-GetAllProducts|Check Price DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"23-|1-GetAllProducts|Check Category DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"24-|1-GetAllProducts|Check Description DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"25-|1-GetAllProducts|Check Image DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"26-|1-GetAllProducts|Check rate DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"27-|1-GetAllProducts|Check count DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.be.a(\"Number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "2- Get a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"\r",
									"pm.test(\"1-|2-GetSingleProduct|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate on JsonData\r",
									"pm.test(\"2-|2-GetSingleProduct|Check response body includes ID\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"3-|2-GetSingleProduct|Check response body includes Title\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"pm.test(\"4-|2-GetSingleProduct|Check response body includes Price\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"price\");\r",
									"});\r",
									"\r",
									"pm.test(\"5-|2-GetSingleProduct|Check response body includes Category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\");\r",
									"});\r",
									"\r",
									"pm.test(\"6-|2-GetSingleProduct|Check response body includes Description\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"description\");\r",
									"});\r",
									"\r",
									"pm.test(\"7-|2-GetSingleProduct|Check response body includes Image\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"image\");\r",
									"});\r",
									"\r",
									"pm.test(\"8-|2-GetSingleProduct|Check response body includes Rating\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"pm.test(\"9-|2-GetSingleProduct|Check response body includes Rate\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).rating).to.have.property(\"rate\");\r",
									"});\r",
									"\r",
									"pm.test(\"10-|2-GetSingleProduct|Check response body includes Count\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).rating).to.have.property(\"count\");\r",
									"});\r",
									"\r",
									"// Validate Response body values is not qual null\r",
									"\r",
									"pm.test(\"11-|2-GetSingleProduct|Check ID !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"12-|2-GetSingleProduct|Check Title !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).title).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"13-|2-GetSingleProduct|Check Price !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).price).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"14-|2-GetSingleProduct|Check Category !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"15-|2-GetSingleProduct|Check Description !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).description).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"16-|2-GetSingleProduct|Check Image !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).image).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"17-|2-GetSingleProduct|Check Rating !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).rating).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"18-|2-GetSingleProduct|Check Rate !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).rating.rate).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"19-|2-GetSingleProduct|Check Count !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).rating.count).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate DataType of response body\r",
									"\r",
									"pm.test(\"20-|2-GetSingleProduct|Check ID DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"21-|2-GetSingleProduct|Check Title DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).title).to.be.a(\"String\");\r",
									"}); \r",
									"\r",
									"pm.test(\"22-|2-GetSingleProduct|Check Price DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).price).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"23-|2-GetSingleProduct|Check Category DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"pm.test(\"24-|2-GetSingleProduct|Check Description DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).description).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"pm.test(\"25-|2-GetSingleProduct|Check Image DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).image).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"pm.test(\"26-|2-GetSingleProduct|Check rate DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).rating.rate).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"27-|2-GetSingleProduct|Check count DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).rating.count).to.be.a(\"Number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/{{RandomID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3- Limit results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"\r",
									"pm.test(\"1-|3- Limit results|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate on JsonData\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"2-|3- Limit results|Check response body includes ID\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"3-|3- Limit results|Check response body includes Title\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"4-|3- Limit results|Check response body includes Price\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"5-|3- Limit results|Check response body includes Category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"6-|3- Limit results|Check response body includes Description\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"7-|3- Limit results|Check response body includes Image\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"8-|3- Limit results|Check response body includes Rating\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"9-|3- Limit results|Check response body includes Rate\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"10-|3- Limit results|Check response body includes Count\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\");\r",
									"});\r",
									"\r",
									"// Validate Response body values is not qual null\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"11-|3- Limit results|Check ID !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"12-|3- Limit results|Check Title !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"13-|3- Limit results|Check Price !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"14-|3- Limit results|Check Category !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"15-|3- Limit results|Check Description !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"16-|3- Limit results|Check Image !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"17-|3- Limit results|Check Rating !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"18-|3- Limit results|Check Rate !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"19-|3- Limit results|Check Count !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate DataType of response body\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"20-|3- Limit results|Check ID DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"21-|3- Limit results|Check Title DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.be.a(\"String\");\r",
									"}); \r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"22-|3- Limit results|Check Price DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"23-|3- Limit results|Check Category DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"24-|3- Limit results|Check Description DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"25-|3- Limit results|Check Image DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"26-|3- Limit results|Check rate DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"27-|3- Limit results|Check count DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.be.a(\"Number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?limit=5",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4- Sort results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"\r",
									"pm.test(\"1-|4- Sort results|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate on JsonData\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"2-|4- Sort results|Check response body includes ID\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"3-|4- Sort results|Check response body includes Title\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"4-|4- Sort results|Check response body includes Price\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"5-|4- Sort results|Check response body includes Category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"6-|4- Sort results|Check response body includes Description\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"7-|4- Sort results|Check response body includes Image\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"8-|4- Sort results|Check response body includes Rating\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"9-|4- Sort results|Check response body includes Rate\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"10-|4- Sort resultss|Check response body includes Count\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\");\r",
									"});\r",
									"\r",
									"// Validate Response body values is not qual null\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"11-|4- Sort results|Check ID !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"12-|4- Sort results|Check Title !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"13-|4- Sort results|Check Price !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"14-|4- Sort results|Check Category !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"15-|4- Sort results|Check Description !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"16-|4- Sort results|Check Image !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"17-|4- Sort results|Check Rating !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"18-|4- Sort results|Check Rate !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"19-|4- Sort results|Check Count !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate DataType of response body\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"20-|4- Sort results|Check ID DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"21-|4- Sort results|Check Title DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.be.a(\"String\");\r",
									"}); \r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"22-|4- Sort results|Check Price DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"23-|4- Sort results|Check Category DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"24-|4- Sort results|Check Description DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"25-|4- Sort results|Check Image DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"26-|4- Sort results|Check rate DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"27-|4- Sort results|Check count DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.be.a(\"Number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products?sort=desc",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "5- Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|5- Get all categories|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"2-|5- Get all categories|Check that response what categories includes\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[0]).to.eql(\"electronics\",\"jewelery\",\"men's clothing\",\"women's clothing\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/categories",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "6-Get products in a specific category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"\r",
									"pm.test(\"1-|6-Get products in a specific category|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate on JsonData\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"2-|6-Get products in a specific category|Check response body includes ID\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"3-|6-Get products in a specific category|Check response body includes Title\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"4-|6-Get products in a specific category|Check response body includes Price\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"price\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"5-|6-Get products in a specific category|Check response body includes Category\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"category\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"6-|6-Get products in a specific category|Check response body includes Description\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"description\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"7-|6-Get products in a specific category|Check response body includes Image\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"image\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"8-|6-Get products in a specific category|Check response body includes Rating\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"9-|6-Get products in a specific category|Check response body includes Rate\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"rate\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"10-|6-Get products in a specific category|Check response body includes Count\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.have.property(\"count\");\r",
									"});\r",
									"\r",
									"// Validate Response body values is not qual null\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"11-|6-Get products in a specific category|Check ID !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"12-|6-Get products in a specific category|Check Title !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"13-|6-Get products in a specific category|Check Price !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"14-|6-Get products in a specific category|Check Category !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"15-|6-Get products in a specific category|Check Description !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"16-|6-Get products in a specific category|Check Image !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"17-|6-Get products in a specific category|Check Rating !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"18-|6-Get products in a specific category|Check Rate !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"19-|6-Get products in a specific category|Check Count !=null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate DataType of response body\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"20-|6-Get products in a specific category|Check ID DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"21-|6-Get products in a specific category|Check Title DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].title).to.be.a(\"String\");\r",
									"}); \r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"22-|6-Get products in a specific category|Check Price DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].price).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"23-|6-Get products in a specific category|Check Category DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].category).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"24-|6-Get products in a specific category|Check Description DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].description).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"25-|6-Get products in a specific category|Check Image DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].image).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"26-|6-Get products in a specific category|Check rate DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.rate).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"27-|6-Get products in a specific category|Check count DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].rating.count).to.be.a(\"Number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/products/category/jewelery",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"category",
								"jewelery"
							]
						}
					},
					"response": []
				},
				{
					"name": "7-Add new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|7-Add new product|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"test product\",\r\n  \"price\": 13.5,\r\n  \"description\": \"lorem ipsum set\",\r\n  \"image\": \"https://i.pravatar.cc\",\r\n  \"category\": \"electronic\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/products",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "8- Update a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|8- Update a product|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"test product\",\r\n    \"price\": 13.5,\r\n    \"description\": \"lorem ipsum set\",\r\n    \"image\": \"https://i.pravatar.cc\",\r\n    \"category\": \"electronic\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/products/{{RandomID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "9- Delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|9- Delete a product|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/products/6",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products",
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3- Cart",
			"item": [
				{
					"name": "9-GetAllCart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|9-GetAllCart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate respone schema\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"2-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"3-|9-GetAllCart|Check ResponseBody Contains userId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"4-|9-GetAllCart|Check ResponseBody Contains date\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"5-|9-GetAllCart|Check ResponseBody Contains products\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"6-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"7-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"8-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\");\r",
									"});\r",
									"\r",
									"// Validate response body values != 0\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"9-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"10-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"11-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"12-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).lenght; i++);\r",
									"pm.test(\"13-|9-GetAllCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"14-|9-GetAllCart|Check id DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"15-|9-GetAllCart|Check userId DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"16-|9-GetAllCart|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"17-|9-GetAllCart|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"18-|9-GetAllCart|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.be.a(\"Number\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "10-Get a single cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|10-Get a single cart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate respone schema\r",
									"pm.test(\"2-|10-GetASingleCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"3-|10-GetASingleCart|Check ResponseBody Contains userId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userId\");\r",
									"});\r",
									"\r",
									"pm.test(\"4-|10-GetASingleCart|Check ResponseBody Contains date\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"5-|10-GetASingleCart|Check ResponseBody Contains products\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"products\");\r",
									"});\r",
									"\r",
									"pm.test(\"6-|10-GetASingleCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0]).to.have.property(\"productId\");\r",
									"});\r",
									"\r",
									"pm.test(\"7-|10-GetASingleCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0]).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"pm.test(\"8-|10-GetASingleCartt|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"__v\");\r",
									"});\r",
									"\r",
									"// Validate response body values != 0\r",
									"pm.test(\"9-|10-GetASingleCart|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"10-|10-GetASingleCart|Check ResponseBody Contains userId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).userId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"11-|10-GetASingleCart|Check ResponseBody Contains date\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).date).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"12-|10-GetASingleCart|Check ResponseBody Contains productId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0].productId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"13-|10-GetASingleCart|Check ResponseBody Contains quantity\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0].quantity).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"pm.test(\"14-|10-GetASingleCart|Check id DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"15-|10-GetASingleCart|Check userId DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"16-|10-GetASingleCart|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).date).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"pm.test(\"17-|10-GetASingleCart|Check productId DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).products[0].productId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"18-|10-GetASingleCart|Check quantity DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).products[0].quantity).to.be.a(\"Number\");\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts/{{RandomID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "11-Limit results",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|11-Limit results|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response schema\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"2-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"3-|11-Limit results|Check ResponseBody Contains userId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"4-|11-Limit results|Check ResponseBody Contains date\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"5-|11-Limit results|Check ResponseBody Contains products\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"6-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"7-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"8-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\");\r",
									"});\r",
									"\r",
									"// Validate response body values != 0\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"9-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"10-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"11-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"12-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++)\r",
									"pm.test(\"13-|11-Limit results|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"14-|11-Limit results|Check id DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"15-|11-Limit results|Check userId DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].userId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"16-|11-Limit results|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].date).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"17-|11-Limit results|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"for (var i = 0; i<JSON.parse(responseBody).length; i++ )\r",
									"pm.test(\"18-|11-Limit results|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.be.a(\"Number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts?limit=5",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "12-Sort results",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|12-SortResults|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response schema\r",
									"var responseBody = pm.response.text();\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"2-|12-SortResults|Check ResponseBody Contains id\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"3-|12-SortResults|Check ResponseBody Contains userId\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"4-|12-SortResults|Check ResponseBody Contains date\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"5-|12-SortResults|Check ResponseBody Contains products\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"6-|12-SortResults|Check ResponseBody Contains productId\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"7-|12-SortResults|Check ResponseBody Contains quantity\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"8-|12-SortResults|Check ResponseBody Contains __v\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\");\r",
									"    });\r",
									"\r",
									"    // Validate response body values != 0\r",
									"    pm.test(\"9-|12-SortResults|Check id is not null\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"10-|12-SortResults|Check userId is not null\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"11-|12-SortResults|Check date is not null\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"12-|12-SortResults|Check productId is not null\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"13-|12-SortResults|Check quantity is not null\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    // Validate Data Type of values of response body\r",
									"    pm.test(\"14-|12-SortResults|Check id DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"15-|12-SortResults|Check userId DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"16-|12-SortResults|Check date DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.be.a(\"string\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"17-|12-SortResults|Check productId DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.be.a(\"number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"18-|12-SortResults|Check quantity DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts?sort=desc",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "13-Get carts in a date range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|13-GetCartsInDateRange|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response schema\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"2-|13-GetCartsInDateRange|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"3-|13-GetCartsInDateRange|Check ResponseBody Contains userId\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"userId\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"4-|13-GetCartsInDateRange|Check ResponseBody Contains date\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"date\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"5-|13-GetCartsInDateRange|Check ResponseBody Contains products\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"products\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"6-|13-GetCartsInDateRange|Check ResponseBody Contains productId\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"productId\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"7-|13-GetCartsInDateRange|Check ResponseBody Contains quantity\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0]).to.have.property(\"quantity\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"8-|13-GetCartsInDateRange|Check ResponseBody Contains __v\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\");\r",
									"    });\r",
									"\r",
									"    // Validate response body values != 0\r",
									"    pm.test(\"9-|13-GetCartsInDateRange|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"10-|13-GetCartsInDateRange|Check ResponseBody Contains userId\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"11-|13-GetCartsInDateRange|Check ResponseBody Contains date\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"12-|13-GetCartsInDateRange|Check ResponseBody Contains productId\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    pm.test(\"13-|13-GetCartsInDateRange|Check ResponseBody Contains quantity\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.not.eql(null);\r",
									"    });\r",
									"\r",
									"    // Validate Data Type of values of response body \r",
									"    pm.test(\"14-|13-GetCartsInDateRange|Check id DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"Number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"15-|13-GetCartsInDateRange|Check userId DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].userId).to.be.a(\"Number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"16-|13-GetCartsInDateRange|Check date DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].date).to.be.a(\"String\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"17-|13-GetCartsInDateRange|Check productId DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].productId).to.be.a(\"Number\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"18-|13-GetCartsInDateRange|Check quantity DataType\", function () {\r",
									"        pm.expect(JSON.parse(responseBody)[i].products[0].quantity).to.be.a(\"Number\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts?startdate=2019-12-10&enddate=2020-10-10",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "startdate",
									"value": "2019-12-10"
								},
								{
									"key": "enddate",
									"value": "2020-10-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "14-Get user carts",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/// Validate status code is 200\r",
									"pm.test(\"1-|14-GetUserCarts|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response schema\r",
									"\r",
									"pm.test(\"2-|14-GetUserCarts|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"3-|14-GetUserCarts|Check ResponseBody Contains userId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userId\");\r",
									"});\r",
									"\r",
									"pm.test(\"4-|14-GetUserCarts|Check ResponseBody Contains date\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"date\");\r",
									"});\r",
									"\r",
									"pm.test(\"5-|14-GetUserCarts|Check ResponseBody Contains products\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"products\");\r",
									"});\r",
									"\r",
									"pm.test(\"6-|14-GetUserCarts|Check ResponseBody Contains productId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0]).to.have.property(\"productId\");\r",
									"});\r",
									"\r",
									"pm.test(\"7-|14-GetUserCarts|Check ResponseBody Contains quantity\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0]).to.have.property(\"quantity\");\r",
									"});\r",
									"\r",
									"pm.test(\"8-|14-GetUserCarts|Check ResponseBody Contains __v\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"__v\");\r",
									"});\r",
									"\r",
									"// Validate response body values != 0\r",
									"pm.test(\"9-|14-GetUserCarts|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"10-|14-GetUserCarts|Check ResponseBody Contains userId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).userId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"11-|14-GetUserCarts|Check ResponseBody Contains date\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).date).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"12-|14-GetUserCarts|Check ResponseBody Contains productId\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0].productId).to.not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"13-|14-GetUserCarts|Check ResponseBody Contains quantity\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).products[0].quantity).to.not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"pm.test(\"14-|14-GetUserCarts|Check id DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"15-|14-GetUserCarts|Check userId DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"16-|14-GetUserCarts|Check date DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).date).to.be.a(\"String\");\r",
									"});\r",
									"\r",
									"pm.test(\"17-|14-GetUserCarts|Check productId DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).products[0].productId).to.be.a(\"Number\");\r",
									"});\r",
									"\r",
									"pm.test(\"18-|14-GetUserCarts|Check quantity DataType\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).products[0].quantity).to.be.a(\"Number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts/2",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "15-Add a new cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|15-Add a new cart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 5,\r\n    \"date\": \"2020-02-03\",\r\n    \"products\": [\r\n        { \"productId\": 5, \"quantity\": 1 },\r\n        { \"productId\": 1, \"quantity\": 5 }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "16-Update a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|16-Update a cart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": 3,\r\n    \"date\": \"2019-12-10\",\r\n    \"products\": [\r\n        { \"productId\": 1, \"quantity\": 3 }\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts/{{RandomID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "17-Delete cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|17-Delete cart|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts/6",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4- User",
			"item": [
				{
					"name": "18-Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|18-GetAllUsers|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate respone schema\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"2-|18-GetAllUsers|Check ResponseBody Contains address\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"3-|18-GetAllUsers|Check ResponseBody Contains geolocation\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"geolocation\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"4-|18-GetAllUsers|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"5-|18-GetAllUsers|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"6-|18-GetAllUsers|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"7-|18-GetAllUsers|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"street\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"8-|18-GetAllUsers|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"9-|18-GetAllUsers|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"zipcode\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"10-|18-GetAllUsers|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"11-|18-GetAllUsers|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"email\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"12-|18-GetAllUsers|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"username\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"13-|18-GetAllUsers|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"password\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"14-|18-GetAllUsers|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"firstname\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"15-|18-GetAllUsers|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"lastname\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"16-|18-GetAllUsers|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"phone\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"17-|18-GetAllUsers|Check ResponseBody Contains __v\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// Validate response body values != 0\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"18-|18-GetAllUsers|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"19-|18-GetAllUsers|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"20-|18-GetAllUsers|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"21-|18-GetAllUsers|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"22-|18-GetAllUsers|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"23-|18-GetAllUsers|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"24-|18-GetAllUsers|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"25-|18-GetAllUsers|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"26-|18-GetAllUsers|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"27-|18-GetAllUsers|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"28-|18-GetAllUsers|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"29-|18-GetAllUsers|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"30-|18-GetAllUsers|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"31-|18-GetAllUsers|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"32-|18-GetAllUsers|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"33-|18-GetAllUsers|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"34-|18-GetAllUsers|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"35-|18-GetAllUsers|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"36-|18-GetAllUsers|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"37-|18-GetAllUsers|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"38-|18-GetAllUsers|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"39-|18-GetAllUsers|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"40-|18-GetAllUsers|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"41-|18-GetAllUsers|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"42-|18-GetAllUsers|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"43-|18-GetAllUsers|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "19-Get single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|19-GetSingleUser|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate respone schema\r",
									"pm.test(\"2-|19-GetSingleUser|Check ResponseBody Contains address\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"address\");\r",
									"});\r",
									"\r",
									"pm.test(\"3-|19-GetSingleUser|Check ResponseBody Contains geolocation\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"geolocation\");\r",
									"});\r",
									"\r",
									"pm.test(\"4-|19-GetSingleUser|Check ResponseBody Contains lat\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.geolocation).to.have.property(\"lat\");\r",
									"});\r",
									"\r",
									"pm.test(\"5-|19-GetSingleUser|Check ResponseBody Contains long\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.geolocation).to.have.property(\"long\");\r",
									"});\r",
									"\r",
									"pm.test(\"6-|19-GetSingleUser|Check ResponseBody Contains city\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"city\");\r",
									"});\r",
									"\r",
									"pm.test(\"7-|19-GetSingleUser|Check ResponseBody Contains street\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"street\");\r",
									"});\r",
									"\r",
									"pm.test(\"8-|19-GetSingleUser|Check ResponseBody Contains number\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"9-|19-GetSingleUser|Check ResponseBody Contains zipcode\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address).to.have.property(\"zipcode\");\r",
									"});\r",
									"\r",
									"pm.test(\"10-|19-GetSingleUser|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"11-|19-GetSingleUser|Check ResponseBody Contains email\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\");\r",
									"});\r",
									"\r",
									"pm.test(\"12-|19-GetSingleUser|Check ResponseBody Contains username\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\");\r",
									"});\r",
									"\r",
									"pm.test(\"13-|19-GetSingleUser|Check ResponseBody Contains password\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\");\r",
									"});\r",
									"\r",
									"pm.test(\"14-|19-GetSingleUser|Check ResponseBody Contains firstname\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.have.property(\"firstname\");\r",
									"});\r",
									"\r",
									"pm.test(\"15-|19-GetSingleUser|Check ResponseBody Contains lastname\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.have.property(\"lastname\");\r",
									"});\r",
									"\r",
									"pm.test(\"16-|19-GetSingleUser|Check ResponseBody Contains phone\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"phone\");\r",
									"});\r",
									"\r",
									"pm.test(\"17-|19-GetSingleUser|Check ResponseBody Contains __v\", function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"__v\");\r",
									"});\r",
									"\r",
									"// Validate response body values != 0\r",
									"pm.test(\"18-|19-GetSingleUser|Check ResponseBody Contains lat\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.geolocation.lat).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"19-|19-GetSingleUser|Check ResponseBody Contains long\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.geolocation.long).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"20-|19-GetSingleUser|Check ResponseBody Contains city\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.city).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"21-|19-GetSingleUser|Check ResponseBody Contains street\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.street).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"22-|19-GetSingleUser|Check ResponseBody Contains number\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.number).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"23-|19-GetSingleUser|Check ResponseBody Contains zipcode\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.zipcode).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"24-|19-GetSingleUser|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"25-|19-GetSingleUser|Check ResponseBody Contains email\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).email).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"26-|19-GetSingleUser|Check ResponseBody Contains username\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).username).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"27-|19-GetSingleUser|Check ResponseBody Contains password\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).password).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"28-|19-GetSingleUser|Check ResponseBody Contains firstname\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).name.firstname).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"29-|19-GetSingleUser|Check ResponseBody Contains lastname\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).name.lastname).not.eql(null);\r",
									"});\r",
									"\r",
									"pm.test(\"30-|19-GetSingleUser|Check ResponseBody Contains phone\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).phone).not.eql(null);\r",
									"});\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"\r",
									"pm.test(\"31-|19-GetSingleUser|Check ResponseBody Contains lat\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.geolocation.lat).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"32-|19-GetSingleUser|Check ResponseBody Contains long\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.geolocation.long).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"33-|19-GetSingleUser|Check ResponseBody Contains city\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.city).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"34-|19-GetSingleUser|Check ResponseBody Contains street\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.street).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"35-|19-GetSingleUser|Check ResponseBody Contains number\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.number).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"36-|19-GetSingleUser|Check ResponseBody Contains zipcode\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).address.zipcode).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"37-|19-GetSingleUser|Check ResponseBody Contains id\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"38-|19-GetSingleUser|Check ResponseBody Contains email\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).email).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"39-|19-GetSingleUser|Check ResponseBody Contains username\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"40-|19-GetSingleUser|Check ResponseBody Contains password\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).password).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"41-|19-GetSingleUser|Check ResponseBody Contains firstname\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).name.firstname).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"42-|19-GetSingleUser|Check ResponseBody Contains lastname\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).name.lastname).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"43-|19-GetSingleUser|Check ResponseBody Contains phone\", function(){\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{RandomID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "20-Limit results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|20-LimitResults|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response schema\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"2-|20-LimitResults|Check ResponseBody Contains address\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"3-|20-LimitResults|Check ResponseBody Contains geolocation\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"geolocation\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"4-|20-LimitResults|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"5-|20-LimitResults|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"6-|20-LimitResults|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"7-|20-LimitResults|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"street\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"8-|20-LimitResults|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"9-|20-LimitResults|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"zipcode\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"10-|20-LimitResults|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"11-|20-LimitResults|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"email\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"12-|20-LimitResults|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"username\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"13-|20-LimitResults|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"password\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"14-|20-LimitResults|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"firstname\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"15-|20-LimitResults|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"lastname\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"16-|20-LimitResults|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"phone\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"17-|20-LimitResults|Check ResponseBody Contains __v\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// Validate response body values != 0\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"18-|20-LimitResults|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"19-|20-LimitResults|Check ResponseBody Contains long\", function(){\r",
									"            pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"20-|20-LimitResults|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"21-|20-LimitResults|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"22-|20-LimitResults|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"23-|20-LimitResults|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"24-|20-LimitResults|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"25-|20-LimitResults|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"26-|20-LimitResults|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"27-|20-LimitResults|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"28-|20-LimitResults|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"29-|20-LimitResults|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"30-|20-LimitResults|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"31-|20-LimitResults|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"32-|20-LimitResults|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"33-|20-LimitResults|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"34-|20-LimitResults|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"35-|20-LimitResults|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"36-|20-LimitResults|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"37-|20-LimitResults|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"38-|20-LimitResults|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"39-|20-LimitResults|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"40-|20-LimitResults|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"41-|20-LimitResults|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"42-|20-LimitResults|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"43-|20-LimitResults|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users?limit={{RandomID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{RandomID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "21-Sort results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status code is 200\r",
									"pm.test(\"1-|21-Sort results|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response schema\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"2-|21-Sort results|Check ResponseBody Contains address\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"address\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"3-|21-Sort results|Check ResponseBody Contains geolocation\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"geolocation\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"4-|21-Sort results|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"lat\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"5-|21-Sort results|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation).to.have.property(\"long\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"6-|21-Sort results|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"city\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"7-|21-Sort results|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"street\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"8-|21-Sort results|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"9-|21-Sort results|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address).to.have.property(\"zipcode\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"10-|21-Sort results|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"id\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"11-|21-Sort results|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"email\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"12-|21-Sort results|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"username\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"13-|21-Sort results|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"password\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"14-|21-Sort results|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"firstname\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"15-|21-Sort results|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name).to.have.property(\"lastname\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"16-|21-Sort results|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"phone\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"17-|21-Sort results|Check ResponseBody Contains __v\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i]).to.have.property(\"__v\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// Validate response body values != 0\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"18-|21-Sort results|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"19-|21-Sort results|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"20-|21-Sort results|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"21-|21-Sort results|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"22-|21-Sort results|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"23-|21-Sort results|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"24-|21-Sort results|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"25-|21-Sort results|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"26-|21-Sort results|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"27-|21-Sort results|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"28-|21-Sort results|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"29-|21-Sort results|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"30-|21-Sort results|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).not.eql(null);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Validate Data Type of values of response body \r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"31-|21-Sort results|Check ResponseBody Contains lat\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.lat).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"32-|21-Sort results|Check ResponseBody Contains long\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.geolocation.long).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"33-|21-Sort results|Check ResponseBody Contains city\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.city).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"34-|21-Sort results|Check ResponseBody Contains street\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.street).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"35-|21-Sort results|Check ResponseBody Contains number\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.number).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"36-|21-Sort results|Check ResponseBody Contains zipcode\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].address.zipcode).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"37-|21-Sort results|Check ResponseBody Contains id\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].id).to.be.a(\"number\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"38-|21-Sort results|Check ResponseBody Contains email\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].email).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"39-|21-Sort results|Check ResponseBody Contains username\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].username).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"40-|21-Sort results|Check ResponseBody Contains password\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].password).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"41-|21-Sort results|Check ResponseBody Contains firstname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.firstname).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"42-|21-Sort results|Check ResponseBody Contains lastname\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].name.lastname).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									"\r",
									"for (var i = 0; i < JSON.parse(responseBody).length; i++) {\r",
									"    pm.test(\"43-|21-Sort results|Check ResponseBody Contains phone\", function(){\r",
									"        pm.expect(JSON.parse(responseBody)[i].phone).to.be.a(\"string\");\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users?sort=desc",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sort",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "22-Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|22-Add user|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"John@gmail.com\",\r\n    \"username\": \"johnd\",\r\n    \"password\": \"m38rmF$\",\r\n    \"name\": {\r\n        \"firstname\": \"John\",\r\n        \"lastname\": \"Doe\"\r\n    },\r\n    \"address\": {\r\n        \"city\": \"kilcoole\",\r\n        \"street\": \"7835 new road\",\r\n        \"number\": 3,\r\n        \"zipcode\": \"12926-3874\",\r\n        \"geolocation\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"long\": \"81.1496\"\r\n        }\r\n    },\r\n    \"phone\": \"1-570-236-7033\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "23-Add user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|23-Add user|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"John@gmail.com\",\r\n    \"username\": \"johnd\",\r\n    \"password\": \"m38rmF$\",\r\n    \"name\": {\r\n        \"firstname\": \"John\",\r\n        \"lastname\": \"Doe\"\r\n    },\r\n    \"address\": {\r\n        \"city\": \"kilcoole\",\r\n        \"street\": \"7835 new road\",\r\n        \"number\": 3,\r\n        \"zipcode\": \"12926-3874\",\r\n        \"geolocation\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"long\": \"81.1496\"\r\n        }\r\n    },\r\n    \"phone\": \"1-570-236-7033\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/{{RandomID}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{RandomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "24- Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1-|24- Delete User|Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/6",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"6"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"    // Generate a random number between 1 and 5 (inclusive)",
					"function chooseRandomIdFrom1To5() {",
					"    var randomId = Math.floor(Math.random() * 5) + 1;   ",
					"    return randomId;",
					"}",
					"pm.collectionVariables.set(\"RandomID\", chooseRandomIdFrom1To5());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Validate Resonse time less than 3 second",
					"pm.test(\"Response time is less than 3000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "RandomID",
			"value": ""
		}
	]
}